import { useEffect, useState } from "react";
import type { NextPage } from "next";
import type TokenListResponse from "@api.video/nodejs-client/lib/model/TokenListResponse";
import type UploadToken from "@api.video/nodejs-client/lib/model/UploadToken";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { UploadButton } from "@api.video/react-upload-button";

const Home: NextPage = () => {
  const [uploadToken, setUploadToken] = useState<string | undefined>(undefined);
  const [progress, setProgress] = useState<number>(0);
  const [success, setSuccess] = useState<boolean>(false);
  const [error, setError] = useState<boolean>(false);

  useEffect(() => {
    const instantiateUploadToken = async (): Promise<void> => {
      // Retrieve your upload tokens list
      const { uploadTokensList } : { uploadTokensList: TokenListResponse } = await fetch(
        `/api/uploadTokens`,
        {
          method: "GET",
        }
      ).then((res) => res.json());

      // If an upload token is available
      if (uploadTokensList.data?.length > 0) {
        setUploadToken(uploadTokensList.data[0].token);
        console.log(uploadTokensList.data);
        return;
      }

      // If we do not have any upload token available, we create one
      const newUploadToken: UploadToken = await fetch(
        `${process.env.NEXT_PUBLIC_HOST}/api/uploadTokens`,
        {
          method: "POST",
        }
      ).then((res) => res.json());
      setUploadToken(newUploadToken.token);
    };
    instantiateUploadToken();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>My Upload App</title>
        <meta name="description" content="Generated by an awesome developer" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Upload a video!</h1>

        {uploadToken && (
          <UploadButton 
          uploadToken={uploadToken}         
          onUploadProgress={(progress) => {
            setSuccess(false);
            setError(false);
            setProgress(
              Math.round((progress.uploadedBytes * 100) / progress.totalBytes)
            );
          }}
          onUploadSuccess={(video) => {
            setSuccess(true);
            console.log(video);
          }}
          onUploadError={(errorMessage) => {
            setError(true);
            console.log(errorMessage);
          }}
          style={{
            marginTop: "30px",
            padding: "15px",
            color: "white",
            backgroundColor: "black",
            border: "2px solid black",
            borderRadius: "15px",
            fontSize: "1.5rem"
          }}>
            Upload {progress > 0 && progress < 100 && <span>{progress}%</span>}
          </UploadButton>
        )}
        {success && <div>Video uploaded successfully!</div>}
        {error && <div>An error occured during the upload...</div>}
      </main>
    </div>
  );
};

export default Home;
